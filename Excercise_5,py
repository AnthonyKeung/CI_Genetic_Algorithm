from random import randint, random, choices
import numpy as np
import matplotlib.pyplot as plt

def individual(length, min, max):
    """ Create a member of the population."""
    return [randint(min, max) for x in range(length)]

def population(count, length, min, max):
    """
    Create a number of individuals (i.e. a population).
    count: the number of individuals in the population
    length: the number of values per individual
    min: the minimum possible value in an individual's list of values
    max: the maximum possible value in an individual's list of values
    """
    return [individual(length, min, max) for x in range(count)]


def fitness(individual, target, X_test_values):
    errors = []
    for x in X_test_values:
        target_y_value = target[0] * x**5 +target[1] * x**4 + target[2] * x**3 + target[3] * x**2 + target[4] * x + target[5] 
        individual_y_value = individual[0] * x**5 + individual[1] * x**4 + individual[2] * x**3 + individual[3] * x**2 + individual[4] * x + individual[5]
        errors.append(abs(target_y_value - individual_y_value)) 
        normalised_error = 1 / (1 + sum(errors))
    return normalised_error


def grade(pop, target, X_values):
    """ Find average fitness for a population."""
    summed = sum(fitness(x, target, X_values) for x in pop)
    return summed / (len(pop) * 1.0)

def evolve(pop, target, retain=0.2, random_select=0.05, mutate=0.1, X_test_values = np.linspace(-100, 100, 200)):
    graded = [(fitness(x, target, X_test_values), x) for x in pop]
    retain_length =  int(len(graded)*retain)

    # roullette selection
    total_fitness = sum([x[0] for x in graded])
    selection_probs = [(x[0] / total_fitness) for x in graded]
    parents = []
    for _ in range(retain_length):
        parents.append(choices(graded, selection_probs)[0][1])
    

    parents = population_to_twos_complement(parents)
    binary_population = population_to_twos_complement(pop)


    # randomly add other individuals to promote genetic diversity
    for individual in binary_population[retain_length:]:
        if random_select > random():
            parents.append(individual)

    # crossover parents to create children
    parents_length = len(parents)
    desired_length = len(pop) - parents_length
    children = []
    while len(children) < desired_length:
        male = randint(0, parents_length - 1)
        female = randint(0, parents_length - 1)
        if male != female:
            male = parents[male]
            female = parents[female]

            #using single point crossover 
            crossover_point = randint(0, len(individual) - 1)
            child = male[:crossover_point] + female[crossover_point:]
            children.append(child)

            # using two point crossover
            # crossover_point = randint(0, len(individual) - 1)
            # crossover_point2 = randint(0, len(individual) - 1)
            # if crossover_point > crossover_point2:
            #     crossover_point, crossover_point2 = crossover_point2, crossover_point
            # child = male[:crossover_point] + female[crossover_point:crossover_point2] + male[crossover_point2:]
            # children.append(child)

            # Using uniform crossover
            # child = []
            # crossover_mask = [randint(0, 1) for _ in range(len(male))]
            # for i in crossover_mask:
            #     if i == 1:
            #         child.append(male[i])
            #     else:
            #         child.append(female[i])
            # child = ''.join(child)
            # children.append(child)
    parents.extend(children)

    # mutate some individuals
    for individual in parents:
        if mutate > random():
            for _ in range(96):
                pos_to_mutate = randint(0, len(individual) - 1)
                #flip the bit 
                individual =  individual[:pos_to_mutate] + ('1' if individual[pos_to_mutate] == '0' else '0') + individual[pos_to_mutate+1:]
    return parents

def int_to_twos_complement(value, bits):
    if value < 0:
        value = (1 << bits) + value
    format_string = '{:0' + str(bits) + 'b}'
    return format_string.format(value)

def population_to_twos_complement(population, bits=8):
    binary_population = []
    for individual in population:
        binary_individual = [int_to_twos_complement(mem, bits) for mem in individual]
        combined_binary = ''.join(binary_individual)
        binary_population.append(combined_binary)
    return binary_population #['111001000010010000100111000111111111101001011001', '001000110011110101011011110100100100001001000010',

def twos_complement_to_decimal(binary_str):
    if binary_str[0] == '1':
        return -((1 << len(binary_str)) - int(binary_str, 2))
    else:
        return int(binary_str, 2)
    
def binary_decimal(parents):
    decimal_list = []
    for parent in parents:
        decimal = []
        for i in range(int(len(parent)/8)):
            mod_i = i*8
            decimal.append(twos_complement_to_decimal(parent[mod_i : mod_i +8]))
        decimal_list.append(decimal)  
    return decimal_list



target = [25, 18, 31, -14, 7, -19]
p_count = 1000
i_length = 6
i_min = -128
i_max = 127
generations = 100
convergence_threshold = 0.04
runs = 1
fitness_history = []
x_test_values = np.linspace(-128, 127, 10)


for run in range(runs):
    p = population(p_count, i_length, i_min, i_max)
    #plot H against generations and average fitness against generations
    H_average_fitness = []
    population_average_fitness = []
    instances_of_H = []
    predicted_values_for_H = [0]
    for i in range(generations):
        pop_with_fitness = [(fitness(x, target, x_test_values), ''.join([int_to_twos_complement(mem, 8) for mem in x])) for x in p]
        p = evolve(p, target, mutate=0.5, retain=0.1,random_select=0.1, X_test_values = x_test_values)

        # Work out average fitness of H 
        H = '11110010' # 31
        instances = 0
        H_fitness = 0
        total_fitness = 0

        for individual in pop_with_fitness:
            if H in individual[1]:
                instances += 1
                H_fitness += individual[0]
            total_fitness += individual[0]

        predicted_values_for_H.append(len(pop_with_fitness)*H_fitness/total_fitness)
        H_average_fitness.append(H_fitness/(instances+1))
        population_average_fitness.append(total_fitness/(len(pop_with_fitness)+1)) 
        instances_of_H.append(instances) 


        p = binary_decimal(p)
        current_fitness = grade(p, target, x_test_values)
        fitness_history.append(current_fitness)
        print(p[0:10], current_fitness)
        print("Generation" , i)


plt.xlabel('Generations over time')
plt.ylabel('Fitness')
plt.title('Fitness over Generations')
plt.plot(H_average_fitness, label='H Average Fitness')
plt.plot(population_average_fitness, label='Population Average Fitness')
plt.legend()
plt.figure()


plt.xlabel('Generations over time')
plt.ylabel('Instances of H')
plt.title('Instances of H over Generations')
plt.plot(instances_of_H, label='Instances of H')
plt.plot(predicted_values_for_H, label='Predicted Values for H')
plt.legend()
plt.show()

